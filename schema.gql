# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Post {
  _id: ID!
  posterUrl: String!
  title: String!
  summary: String!
  content: String!
  tags: [String!]!
  lastModifiedDate: DateTime!
  like: Int!
  pv: Int!
  isPublic: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  prev: Post
  next: Post
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Posts {
  total: ID!
  page: Float!
  pageSize: Float!
  items: [Post!]!
}

type Tags {
  tags: [String!]!
}

type BatchDeleteModel {
  ok: Float
  n: Float
  deletedCount: Float
  ids: [ID!]!
}

type PostStatisticsModel {
  _id: String!
  postId: String!
  postName: String!
  scenes: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostStatisticsGroupItemModel {
  postId: String!
  postName: String!
  scenes: String!
  operatedAt: DateTime!
}

type PostStatisticsGroupModel {
  _id: String!
  count: Float!
  items: [PostStatisticsGroupItemModel!]!
}

type UserModel {
  _id: ID!
  email: String!
  username: String!
  password: String!
  role: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  posts(input: PaginationInput!): Posts!
  getPosts(input: PaginationInput!): Posts!
  getPostById(id: ID!): Post!
  getAllTags: Tags!
  getPostStatistics: [PostStatisticsGroupModel!]!
  login(input: LoginInput!): UserModel!
}

input PaginationInput {
  page: Float!
  pageSize: Float!
  title: String
  tag: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createPost(input: CreatePostInput!): Post!
  updatePostById(input: UpdatePostInput!): Post!
  deletePostById(id: ID!): Post!
  deletePosts(ids: [ID!]!): BatchDeleteModel!
  updatePV(id: ID!): Post!
  updateLike(id: ID!): Post!
  getTopPVPosts(limit: Int!): Post!
  getTopLikePosts(limit: Int!): Post!
  createPostStatistics(input: CreatePostStatisticsInput!): PostStatisticsModel!
  register(input: RegisterInput!): UserModel!
}

input CreatePostInput {
  posterUrl: String!
  title: String!
  summary: String!
  content: String!
  tags: [String!]!
  lastModifiedDate: DateTime!
  isPublic: Boolean
}

input UpdatePostInput {
  id: String!
  posterUrl: String
  title: String
  summary: String
  content: String
  tags: [String!]
  like: Float
  pv: Float
  lastModifiedDate: DateTime
  isPublic: Boolean
}

input CreatePostStatisticsInput {
  postId: String!
  postName: String!
  scenes: String!
}

input RegisterInput {
  email: String!
  username: String!
  password: String!
}
